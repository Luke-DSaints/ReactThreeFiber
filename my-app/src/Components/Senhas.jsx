/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useLayoutEffect, useRef } from 'react'
import { useGLTF, useScroll } from '@react-three/drei'
import { useFrame } from '@react-three/fiber';
import gsap from "gsap"



export const FLOOR_HEIGHT = 2.3;
export const NB_FLOORS = 4;



export function Senhas(props) {
  const { nodes, materials } = useGLTF('./models/Senhas.glb')
  const ref = useRef();
  const tl = useRef();
  const scroll = useScroll();
  const teste = useRef();
  const senhas = useRef();
  const teste2 = useRef();
  const teste3 = useRef();
  const luz1 = useRef();

  useFrame(() =>{
    tl.current.seek(scroll.offset*tl.current.duration());


    if (senhas.current.position.y < 1) {// Change 4 to the desired stopping position
      senhas.current.position.y += 0.04;   // You can adjust the speed here
      senhas.current.rotation.y += Math.PI*2;
    }

   
  });


  useLayoutEffect(() => {
    tl.current = gsap.timeline();



   
 

    //Vertical Animatiom
    tl.current.to(
        ref.current.position,
        {
            duration: 4,
            y: -FLOOR_HEIGHT * (NB_FLOORS - 0.29),
        },
        0
    );

    

  //   Senhas
  //   tl.current.to(
  //     senhas.current.position,{
  //         duration: 0.5,
  //         z: -4
  //     }, 0.2
  // )
  
  // //Tela 1
  //   tl.current.from(
  //       teste.current.position,{
  //           duration: 0.7,
  //           z: -3
  //       }, 0.2
  //   )
    
  //   tl.current.from(
  //     teste.current.rotation,{
  //         duration: 0.8,
  //         y: Math.PI/ 2,
  //     }, 0.2
  //   )
    
  //   tl.current.to(
  //     teste.current.position,{
  //         duration: 1,
  //         z: 3.5*3
  //     }, 1
  //   )
  //   tl.current.to(
  //     teste.current.rotation,{
  //         duration: 0.5,
  //         y: (Math.PI/ 2)*2,
  //     }, 1
  //   )

  //   //Tela 2
  //   tl.current.from(
  //     teste2.current.position,{
  //         duration: 0.8,
  //         z: -3
  //     }, 1.1
  // )
  
  // tl.current.from(
  //   teste2.current.rotation,{
  //       duration: 0.5,
  //       y: Math.PI/ 2,
  //   }, 1.1
  // )
  
  // tl.current.to(
  //   teste2.current.position,{
  //       duration: 1,
  //       z: 3.5*3
  //   }, 2
  // )
  // tl.current.to(
  //   teste2.current.rotation,{
  //       duration: 0.5,
  //       y: (Math.PI/ 2)*2,
  //   }, 2
  // )
    
  
  // //Tela 3
  //   tl.current.from(
  //     teste3.current.position,{
  //         duration: 0.7,
  //         z: -3
  //     }, 2.2
  // )
  
  // tl.current.from(
  //   teste3.current.rotation,{
  //       duration: 0.7,
  //       y: Math.PI/ 2,
  //   }, 2.2
  // )

  // //Luz1
  // tl.current.to(
  //   luz1.current.position,{
  //       duration: 1,
  //       z: 3.5*3
  //   }, 0.2
  // )
  
  // tl.current.to(
  //   teste3.current.position,{
  //       duration: 0.5,
  //       z: 3.3
  //   }, 4
  // )
  // tl.current.to(
  //   teste3.current.rotation,{
  //       duration: 0.5,
  //       y: Math.PI/ 2,
  //   }, 4
  // )

    
    
  
  


    //Object Animations



  }, [])






  return (
    <group {...props} dispose={null} ref={ref}>
        <group ref={senhas}  position-y={-3}>
          <mesh geometry={nodes.Cube.geometry} material={materials['Material.002']} position={[0, 1.286, 0]} castShadow  />
          <mesh geometry={nodes.Plane.geometry} material={materials['Material.001']} position={[1.021, 2.388, 0]} rotation={[0, 0, -Math.PI / 2]} scale={[1, 1, 0.644]} castShadow />
          <mesh geometry={nodes.Plane001.geometry} material={materials['Material.001']} position={[1.188, 0, 0]} castShadow receiveShadow/>
        </group>
        <group ref={teste}>
          <mesh  position={[0,14,0]}  castShadow> 
            <boxGeometry/>
            <meshStandardMaterial color={0xce2727}/>
          </mesh>
        </group>
        <group ref={teste2}>
          <mesh  position={[0,21,0]}  castShadow> 
            <boxGeometry/>
            <meshStandardMaterial color={0xce2727}/>
          </mesh>
        </group>
        <group ref={teste3}>
          <mesh  position={[0,29,0]} castShadow > 
            <boxGeometry/>
            <meshStandardMaterial color={0xce2727}/>
          </mesh>
        </group>
        <group ref={luz1}>
          <directionalLight position={[3,14,0]} intensity={4} castShadow/>
        </group>
        <group>
          <mesh scale={[1,200,200]} position={[-6,0,0]} receiveShadow>
            <boxGeometry/>
            <meshStandardMaterial />
          </mesh>
        </group>

    </group>
    
    
    
  )
}

useGLTF.preload('./models/Senhas.glb')